// Generated by Dagger (https://dagger.dev).
package com.test.codeglo;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.google.android.gms.maps.model.PolylineOptions;
import com.test.codeglo.di.MapSingletonModule;
import com.test.codeglo.di.MapSingletonModule_ProvideDirectionRepoFactory;
import com.test.codeglo.di.MapSingletonModule_ProvideMapAnimatorFactory;
import com.test.codeglo.di.MapSingletonModule_ProvidePolylineOptionsFactory;
import com.test.codeglo.di.MapSingletonModule_ProvideRouteEvaluatorFactory;
import com.test.codeglo.di.NetworkModule;
import com.test.codeglo.di.NetworkModule_ProvideApiServiceFactory;
import com.test.codeglo.di.NetworkModule_ProvidesHeaderInterceptorFactory;
import com.test.codeglo.di.NetworkModule_ProvidesLogginInterceptorFactory;
import com.test.codeglo.di.NetworkModule_ProvidesOkHttpClientFactory;
import com.test.codeglo.di.NetworkModule_ProvidesRetrofitFactory;
import com.test.codeglo.network.ApiService;
import com.test.codeglo.repository.Repository;
import com.test.codeglo.ui.album.AlbumActivity;
import com.test.codeglo.ui.listing.ListingActivity;
import com.test.codeglo.ui.maps.MapsActivity;
import com.test.codeglo.ui.photos.PhotosActivity;
import com.test.codeglo.utility.NetworkHelper;
import com.test.codeglo.utility.maputility.DirectionRepo;
import com.test.codeglo.utility.maputility.MapAnimator;
import com.test.codeglo.utility.maputility.RouteEvaluator;
import com.test.codeglo.viewModel.AlbumsActivityViewModel;
import com.test.codeglo.viewModel.AlbumsActivityViewModel_HiltModules_KeyModule_ProvideFactory;
import com.test.codeglo.viewModel.MainViewModel;
import com.test.codeglo.viewModel.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.test.codeglo.viewModel.MapsViewModel;
import com.test.codeglo.viewModel.MapsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.test.codeglo.viewModel.PhotosActivityViewModel;
import com.test.codeglo.viewModel.PhotosActivityViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerUserApplication_HiltComponents_SingletonC extends UserApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerUserApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<Interceptor> providesHeaderInterceptorProvider;

  private Provider<HttpLoggingInterceptor> providesLogginInterceptorProvider;

  private Provider<OkHttpClient> providesOkHttpClientProvider;

  private Provider<Retrofit> providesRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<NetworkHelper> networkHelperProvider;

  private Provider<DirectionRepo> provideDirectionRepoProvider;

  private Provider<PolylineOptions> providePolylineOptionsProvider;

  private Provider<RouteEvaluator> provideRouteEvaluatorProvider;

  private Provider<MapAnimator> provideMapAnimatorProvider;

  private DaggerUserApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.providesHeaderInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<Interceptor>(singletonC, 3));
    this.providesLogginInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<HttpLoggingInterceptor>(singletonC, 4));
    this.providesOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 2));
    this.providesRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 1));
    this.provideApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<ApiService>(singletonC, 0));
    this.networkHelperProvider = DoubleCheck.provider(new SwitchingProvider<NetworkHelper>(singletonC, 5));
    this.provideDirectionRepoProvider = DoubleCheck.provider(new SwitchingProvider<DirectionRepo>(singletonC, 6));
    this.providePolylineOptionsProvider = DoubleCheck.provider(new SwitchingProvider<PolylineOptions>(singletonC, 7));
    this.provideRouteEvaluatorProvider = DoubleCheck.provider(new SwitchingProvider<RouteEvaluator>(singletonC, 9));
    this.provideMapAnimatorProvider = DoubleCheck.provider(new SwitchingProvider<MapAnimator>(singletonC, 8));
  }

  @Override
  public void injectUserApplication(UserApplication userApplication) {
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return Collections.<Boolean>emptySet();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder mapSingletonModule(MapSingletonModule mapSingletonModule) {
      Preconditions.checkNotNull(mapSingletonModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public UserApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerUserApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements UserApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerUserApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public UserApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements UserApplication_HiltComponents.ActivityC.Builder {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public UserApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements UserApplication_HiltComponents.FragmentC.Builder {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public UserApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements UserApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public UserApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements UserApplication_HiltComponents.ViewC.Builder {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public UserApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements UserApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public UserApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements UserApplication_HiltComponents.ServiceC.Builder {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerUserApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public UserApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends UserApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends UserApplication_HiltComponents.FragmentC {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends UserApplication_HiltComponents.ViewC {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends UserApplication_HiltComponents.ActivityC {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectAlbumActivity(AlbumActivity albumActivity) {
    }

    @Override
    public void injectListingActivity(ListingActivity listingActivity) {
    }

    @Override
    public void injectMapsActivity(MapsActivity mapsActivity) {
    }

    @Override
    public void injectPhotosActivity(PhotosActivity photosActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(4).add(AlbumsActivityViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MapsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PhotosActivityViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends UserApplication_HiltComponents.ViewModelC {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<AlbumsActivityViewModel> albumsActivityViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<MapsViewModel> mapsViewModelProvider;

    private Provider<PhotosActivityViewModel> photosActivityViewModelProvider;

    private ViewModelCImpl(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private Repository repository() {
      return new Repository(singletonC.provideApiServiceProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.albumsActivityViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.mapsViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.photosActivityViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(4).put("com.test.codeglo.viewModel.AlbumsActivityViewModel", ((Provider) albumsActivityViewModelProvider)).put("com.test.codeglo.viewModel.MainViewModel", ((Provider) mainViewModelProvider)).put("com.test.codeglo.viewModel.MapsViewModel", ((Provider) mapsViewModelProvider)).put("com.test.codeglo.viewModel.PhotosActivityViewModel", ((Provider) photosActivityViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerUserApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.test.codeglo.viewModel.AlbumsActivityViewModel 
          return (T) new AlbumsActivityViewModel(viewModelCImpl.repository(), singletonC.networkHelperProvider.get());

          case 1: // com.test.codeglo.viewModel.MainViewModel 
          return (T) new MainViewModel(viewModelCImpl.repository(), singletonC.networkHelperProvider.get());

          case 2: // com.test.codeglo.viewModel.MapsViewModel 
          return (T) new MapsViewModel(viewModelCImpl.repository(), singletonC.networkHelperProvider.get(), singletonC.provideDirectionRepoProvider.get(), singletonC.providePolylineOptionsProvider.get(), singletonC.provideMapAnimatorProvider.get());

          case 3: // com.test.codeglo.viewModel.PhotosActivityViewModel 
          return (T) new PhotosActivityViewModel(viewModelCImpl.repository(), singletonC.networkHelperProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends UserApplication_HiltComponents.ActivityRetainedC {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerUserApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerUserApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends UserApplication_HiltComponents.ServiceC {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerUserApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerUserApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerUserApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.test.codeglo.network.ApiService 
        return (T) NetworkModule_ProvideApiServiceFactory.provideApiService(singletonC.providesRetrofitProvider.get());

        case 1: // retrofit2.Retrofit 
        return (T) NetworkModule_ProvidesRetrofitFactory.providesRetrofit(singletonC.providesOkHttpClientProvider.get());

        case 2: // okhttp3.OkHttpClient 
        return (T) NetworkModule_ProvidesOkHttpClientFactory.providesOkHttpClient(singletonC.providesHeaderInterceptorProvider.get(), singletonC.providesLogginInterceptorProvider.get());

        case 3: // okhttp3.Interceptor 
        return (T) NetworkModule_ProvidesHeaderInterceptorFactory.providesHeaderInterceptor();

        case 4: // okhttp3.logging.HttpLoggingInterceptor 
        return (T) NetworkModule_ProvidesLogginInterceptorFactory.providesLogginInterceptor();

        case 5: // com.test.codeglo.utility.NetworkHelper 
        return (T) new NetworkHelper(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 6: // com.test.codeglo.utility.maputility.DirectionRepo 
        return (T) MapSingletonModule_ProvideDirectionRepoFactory.provideDirectionRepo(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 7: // com.google.android.gms.maps.model.PolylineOptions 
        return (T) MapSingletonModule_ProvidePolylineOptionsFactory.providePolylineOptions();

        case 8: // com.test.codeglo.utility.maputility.MapAnimator 
        return (T) MapSingletonModule_ProvideMapAnimatorFactory.provideMapAnimator(ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule), singletonC.provideRouteEvaluatorProvider.get());

        case 9: // com.test.codeglo.utility.maputility.RouteEvaluator 
        return (T) MapSingletonModule_ProvideRouteEvaluatorFactory.provideRouteEvaluator();

        default: throw new AssertionError(id);
      }
    }
  }
}
