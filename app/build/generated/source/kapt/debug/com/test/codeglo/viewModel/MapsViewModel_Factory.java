// Generated by Dagger (https://dagger.dev).
package com.test.codeglo.viewModel;

import com.google.android.gms.maps.model.PolylineOptions;
import com.test.codeglo.repository.Repository;
import com.test.codeglo.utility.NetworkHelper;
import com.test.codeglo.utility.maputility.DirectionRepo;
import com.test.codeglo.utility.maputility.MapAnimator;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MapsViewModel_Factory implements Factory<MapsViewModel> {
  private final Provider<Repository> repositoryProvider;

  private final Provider<NetworkHelper> networkHelperProvider;

  private final Provider<DirectionRepo> directionRepoProvider;

  private final Provider<PolylineOptions> polylineOptionsProvider;

  private final Provider<MapAnimator> mapAnimatorProvider;

  public MapsViewModel_Factory(Provider<Repository> repositoryProvider,
      Provider<NetworkHelper> networkHelperProvider, Provider<DirectionRepo> directionRepoProvider,
      Provider<PolylineOptions> polylineOptionsProvider,
      Provider<MapAnimator> mapAnimatorProvider) {
    this.repositoryProvider = repositoryProvider;
    this.networkHelperProvider = networkHelperProvider;
    this.directionRepoProvider = directionRepoProvider;
    this.polylineOptionsProvider = polylineOptionsProvider;
    this.mapAnimatorProvider = mapAnimatorProvider;
  }

  @Override
  public MapsViewModel get() {
    return newInstance(repositoryProvider.get(), networkHelperProvider.get(), directionRepoProvider.get(), polylineOptionsProvider.get(), mapAnimatorProvider.get());
  }

  public static MapsViewModel_Factory create(Provider<Repository> repositoryProvider,
      Provider<NetworkHelper> networkHelperProvider, Provider<DirectionRepo> directionRepoProvider,
      Provider<PolylineOptions> polylineOptionsProvider,
      Provider<MapAnimator> mapAnimatorProvider) {
    return new MapsViewModel_Factory(repositoryProvider, networkHelperProvider, directionRepoProvider, polylineOptionsProvider, mapAnimatorProvider);
  }

  public static MapsViewModel newInstance(Repository repository, NetworkHelper networkHelper,
      DirectionRepo directionRepo, PolylineOptions polylineOptions, MapAnimator mapAnimator) {
    return new MapsViewModel(repository, networkHelper, directionRepo, polylineOptions, mapAnimator);
  }
}
